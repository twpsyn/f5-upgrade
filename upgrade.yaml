---
- hosts: all
  gather_facts: no
  connection: local
  collections:
  - f5networks.f5_modules
  
  vars_prompt:
  - name: f5_username
    prompt: "Enter F5 Username"
    private: no
    default: "{{ lookup('env','USER') }}"
  - name: f5_password
    prompt: "Enter F5 Password"
  
  tasks: 

  - name: Get Software Volume Information
    bigip_device_info:
      gather_subset:
        - software-volumes
      provider: "{{ provider }}"
    register: sv
  
  - name: Get Current Version
    set_fact:
      current_version: "{{ item.version }}"
      current_boot_loc: "{{ item.name }}"
    when: item.active == "yes"
    with_items: "{{ sv.software_volumes }}"
  
  - name: Identify Hosts That Require Upgrade
    set_fact:
      wants_upgrade: True
    when: not new_image is search(current_version)
  
  - name: Identify Hosts That Don't Require Upgrade
    set_fact:
      wants_upgrade: False
    when: new_image is search(current_version)
    
  - name: Only Upgrading Devices Which Need It
    block:

    - name: Check For Only One Boot Location
      set_fact:
        dest_boot_loc: "HD1.2"
      when: (not dest_boot_loc is defined) and (sv.software_volumes|length == 1)
    
    - name: Check First Boot Location
      set_fact:
        dest_boot_loc: "{{ sv.software_volumes.0.name }}"
      when: (not dest_boot_loc is defined) and (sv.software_volumes.0.active != "yes")

    - name: Check Second Boot Location
      set_fact:
        dest_boot_loc: "{{ sv.software_volumes.1.name }}"
      when: (not dest_boot_loc is defined) and (sv.software_volumes.1.active != "yes")
    
    when: wants_upgrade

  - name: Device Version Status
    debug:
      msg: 
        - "Current version: {{ current_version }}"
        - "Desired image: {{ new_image }}"
        - "Upgrade needed: {{ wants_upgrade }}"
      
  - name: Print Upgrade Information
    debug:
      msg: 
        - "Current version: {{ current_version }} booting from {{ current_boot_loc }}"
        - "New Image '{{ new_image }}' will be uploaded from '{{ new_image_dir }}'"
        - "It will be installed to boot location '{{ dest_boot_loc }}'"
    when: wants_upgrade

  - name: Wait For Confirmation
    pause:
      prompt: "Press a key to continue..."

  - name: Pre-Upgrade Tasks
    block:
    - name: Save the running configuration of the BIG-IP
      bigip_config:
        provider: "{{ provider }}"
        save: yes

    - name: Ensure backup directory exists
      file:
        path: "{{ backup_loc }}/{{ inventory_hostname_short }}"
        state: directory
    
    - name: Get Pre-Upgrade UCS Backup
      bigip_ucs_fetch:
        create_on_missing: yes
        src: "{{ backup_pfx }}_pre-upgrade.ucs"
        dest: "{{ backup_loc }}/{{ inventory_hostname_short }}/{{ backup_pfx }}_pre-upgrade.ucs"
        provider: "{{ provider }}"

    - name: Upload image
      bigip_software_image:
        provider: "{{ provider }}"
        image: "{{ new_image_dir }}/{{ new_image }}"
    
    - name: Install Image
      bigip_software_install:
        provider: "{{ provider }}"
        image: "{{ new_image }}"
        state: installed
        volume: "{{ dest_boot_loc }}"
  
    when: wants_upgrade

  - name: Group 1 Upgrades
    block:

    - import_tasks: tasks/checks.yaml
      vars:
        stage: "pre"
      when: check_virts or check_pools or check_ver

    - name: Group 1 Activate Image (Will Cause Reboot)
      bigip_software_install:
        provider: "{{ provider }}"
        image: "{{ new_image }}"
        state: activated
        volume: "{{ dest_boot_loc }}"
      any_errors_fatal: true
    
    when: (reboot_group == 1) and (wants_upgrade)
  
  - name: Wait for all devices to be healthy before proceeding
    bigip_command:
      provider: "{{ provider }}"
      match: "any"
      warn: no
      commands:
        - bash -c "cat /var/prompt/ps1"
      wait_for:
        - result[0] contains Active
        - result[0] contains Standby
      retries: 12
      interval: 10
    register: result  
    any_errors_fatal: true

  - import_tasks: tasks/checks.yaml
    vars:
      stage: "post"
    when: (check_virts or check_pools or check_ver) and (reboot_group == 1) and (wants_upgrade)


  - name: Group 2 Upgrade
    block:

    - import_tasks: tasks/checks.yaml
      vars:
        stage: "pre"
      when: check_virts or check_pools or check_ver

    - name: Group 2 Activate Image (Will Cause Reboot)
      bigip_software_install:
        provider: "{{ provider }}"
        image: "{{ new_image }}"
        state: activated
        volume: "{{ dest_boot_loc }}"
      any_errors_fatal: true
    
    when: (reboot_group == 2) and (wants_upgrade)
    
  - name: Wait for all devices to be healthy before proceeding
    bigip_command:
      provider: "{{ provider }}"
      match: "any"
      warn: no
      commands:
        - bash -c "cat /var/prompt/ps1"
      wait_for:
        - result[0] contains Active
        - result[0] contains Standby
      retries: 12
      interval: 10
    register: result  
    any_errors_fatal: true
  
  - import_tasks: tasks/checks.yaml
    vars:
      stage: "post"
    when: (check_virts or check_pools or check_ver) and (reboot_group == 2) and (wants_upgrade)

  - name: Get Post-Upgrade UCS Backup
    bigip_ucs_fetch:
      create_on_missing: yes
      src: "{{ backup_pfx }}_post-upgrade.ucs"
      dest: "{{ backup_loc }}/{{ inventory_hostname_short }}/{{ backup_pfx }}_post-upgrade.ucs"
      provider: "{{ provider }}"
    when: wants_upgrade
    
